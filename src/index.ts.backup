import express from "express";
import cors from "cors";
import helmet from "helmet";
import dotenv from "dotenv";
import { testDatabaseConnection } from "./config/database";
import { globalRateLimiter } from "./middleware/rateLimit";

// Import public routes
import articlesRouter from "./routes/articles";
import commentsRouter from "./routes/comments";
import authorsRouter from "./routes/authors";
import categoriesRouter from "./routes/categories";
import tagsRouter from "./routes/tags";
import trendingRouter from "./routes/trending";
import relatedRouter from "./routes/related";
import searchRouter from "./routes/search";

// Import admin routes
import adminCommentsRouter from "./routes/admin/comments";
import adminAuthorsRouter from "./routes/admin/authors";
import adminCategoriesRouter from "./routes/admin/categories";
import adminTagsRouter from "./routes/admin/tags";
import authRouter from "./routes/auth";
import passport from "passport";
import usersRouter from "./routes/users";
import adminArticlesRouter from "./routes/admin/articles";

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// CORS configuration
const allowedOrigins = (process.env.ALLOWED_ORIGINS || "http://localhost:3000").split(",");

app.use(
  cors({
    origin: (origin, callback) => {
      // Allow requests with no origin (like mobile apps or curl)
      if (!origin) return callback(null, true);

      if (allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS"));
      }
    },
    credentials: true,
  })
);

// Security middleware
app.use(helmet());

// Body parsing
app.use(express.json({ limit: "10mb" }));

// Passport initialization
app.use(passport.initialize());
app.use(express.urlencoded({ extended: true, limit: "10mb" }));

// Global rate limiting
app.use(globalRateLimiter);

// Debug logging
app.use((req, res, next) => {
  console.log(`üì• ${req.method} ${req.path}`);
  next();
});

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({ status: "ok", timestamp: new Date().toISOString() });
});

// Public API routes
app.use("/api/articles", articlesRouter);
app.use("/api/comments", commentsRouter);
app.use("/api/authors", authorsRouter);
app.use("/api/categories", categoriesRouter);
app.use("/api/tags", tagsRouter);
app.use("/api/auth", authRouter);
app.use("/api/users", usersRouter);
app.use("/api/trending", trendingRouter);
app.use("/api/related", relatedRouter);
app.use("/api/search", searchRouter);

// Admin API routes
app.use("/api/admin/articles", adminArticlesRouter);
app.use("/api/admin/comments", adminCommentsRouter);
app.use("/api/admin/authors", adminAuthorsRouter);
app.use("/api/admin/categories", adminCategoriesRouter);
app.use("/api/admin/tags", adminTagsRouter);

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: "Endpoint not found" });
});

// Error handler
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error("Unhandled error:", err);
  res.status(500).json({
    error: process.env.NODE_ENV === "production" ? "Internal server error" : err.message,
  });
});

// Start server
async function start() {
  try {
    // Test database connection
    const dbConnected = await testDatabaseConnection();
    if (!dbConnected) {
      console.error("Failed to connect to database. Exiting...");
      process.exit(1);
    }

    app.listen(PORT, () => {
      console.log(`üöÄ Server running on port ${PORT}`);
      console.log(`üìù Environment: ${process.env.NODE_ENV || "development"}`);
      console.log(`üåê Allowed origins: ${allowedOrigins.join(", ")}`);
      console.log(`\nüì° Available endpoints:`);
      console.log(`   Public:`);
      console.log(`   - GET  /api/articles`);
      console.log(`   - GET  /api/articles/:slug`);
      console.log(`   - GET  /api/comments`);
      console.log(`   - POST /api/comments`);
      console.log(`   - POST /api/comments/:commentId/like`);
      console.log(`   - GET  /api/authors`);
      console.log(`   - GET  /api/authors/:slug`);
      console.log(`   - GET  /api/categories`);
      console.log(`   - GET  /api/categories/:slug`);
      console.log(`   - GET  /api/tags`);
      console.log(`   - GET  /api/tags/:slug`);
      console.log(`   - GET  /api/trending`);
      console.log(`   - GET  /api/related`);
      console.log(`   - GET  /api/search`);
      console.log(`   Admin (requires authentication):`);
      console.log(`   - /api/admin/articles (GET, POST, PUT, DELETE)`);
      console.log(`   - /api/admin/comments (GET, PUT, DELETE)`);
      console.log(`   - /api/admin/authors (GET, POST, PUT, DELETE)`);
      console.log(`   - /api/admin/categories (GET, POST, PUT, DELETE)`);
      console.log(`   - /api/admin/tags (GET, POST, PUT, DELETE)`);
    });
  } catch (error) {
    console.error("Failed to start server:", error);
    process.exit(1);
  }
}

start();
